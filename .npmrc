# 确保所使用的 Node.js 引擎与项目的要求相符。如果安装的包要求特定版本的 Node.js 或 npm，
# 则启用这个选项会强制安装这些包时，版本不匹配时抛出错误。
# 例如：某个包要求 Node.js 版本为 >= 16，设置 `engine-strict=true` 会让安装时检查 Node.js 版本是否匹配。
engine-strict=true

# 启用“羞耻性提升”（shameful hoisting）。这个选项会将所有依赖包的依赖提升到项目根目录的 `node_modules` 中，
# 而不是按层次结构存放。这样做是为了兼容一些不支持 `pnpm` 严格依赖树的工具。
# 这通常用于解决老旧或不兼容的包，但它可能导致依赖冲突，因此要谨慎使用。
shamefully-hoist=true

# 禁用 `peerDependencies` 的严格检查。通常情况下，如果项目中安装的某些依赖与其 `peerDependencies`
# 不兼容，npm 或 pnpm 会抛出警告。将该选项设置为 `false` 时，会忽略这些警告，允许版本不匹配的依赖安装。
# 这适用于你确认依赖版本不严格匹配时，或者希望避免安装冲突时。
strict-peer-dependencies=false

# 启用模拟 shell 环境，这样 `pnpm` 或 `npm` 在执行生命周期钩子时就会使用模拟的 shell 环境来执行命令。
# 这对于某些需要在 shell 中执行的脚本（比如 `postinstall`）非常有用，尤其是在一些平台或环境中。
shell-emulator=true

# 禁用自动安装 `peerDependencies`。通常，当你安装一个包时，npm 或 pnpm 会自动安装它的 `peerDependencies`，
# 这个选项设置为 `false` 后，你必须手动安装所需的 `peerDependencies`。
# 这种方式允许你对项目的依赖版本进行更精确的控制，避免无意中引入不需要的版本。
auto-install-peers=true

# 设置 npm registry 镜像源为淘宝的 npm 镜像（现在由 npmmirror.com 提供）。这个镜像源位于中国大陆，
# 可以显著加快安装速度，特别是在中国地区。
# 你可以将其替换为其他镜像源（如官方的 npm registry），具体取决于你的网络状况和需求。
registry=https://registry.npmmirror.com